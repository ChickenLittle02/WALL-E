@inject IJSRuntime JSRuntime
@using BackEnd
@using Microsoft.AspNetCore.Components.Web;
@page "/counter"

<div class="counter">
    <canvas id="myCanvas" class="bg-gray"></canvas>

    <div class="compilator">
        <h4 class="title-compilator">Escriba su codigo | Error</h4>
        <textarea type="text" @bind="Codigo" class="textarea-compilator bg-gray" ></textarea>
        <textarea @bind="Consola" @onclick="ClearDefaultText" class="error-compilator bg-gray" readonly></textarea>
        <div>
            <button class="btn-compilator-compilar btn-compilator bg-gray"
                @onclick="ParsearExpression"><strong>Compilar</strong></button>
            <button class="btn-compilator-compilar btn-compilator bg-gray"><strong>Restaurar</strong></button>
            <button class="btn-compilator-compilar btn-compilator bg-gray"><strong>Importar</strong></button>
        </div>
    </div>
</div>


@code
{
    @*Nuevos Metodos Agregados*@

private string _codigo = "Escribe tu código aquí";
public string Codigo
{
    get { return _codigo; }
    set { _codigo = value; }
}

  private void ClearDefaultText()
  {
    if (_codigo == "Escribe tu código aquí") {
      Codigo = ""; // Esto eliminará la frase por defecto
    }
  }

private string _consola = "";
public string Consola
{
    get { return _consola; }
    set { _consola = value; }
}
    private void ParsearExpression()
    {   
        _consola = "";
        BackEnd.Lexer_Analizer.Tokenizer Prueba = new BackEnd.Lexer_Analizer.Tokenizer(_codigo);
        Prueba.Start();
        var Syntaxis = new BackEnd.Syntax_Analizer.Syntax(Prueba.TokenSet);
        Syntaxis.Start();

        foreach (var item in Syntaxis.NodesLines)
        {
            item.CheckSemantic();
        }

        foreach (var item in Syntaxis.NodesLines)
        {
            item.Evaluate();
            string resultado = item.Value.ToString()+"\n"; 
            _consola += resultado;
        }



    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupPaperJs", "myCanvas");
        }
    }



    private async Task CrearPunto()
    {
        Random Prueba = new Random();
        await JSRuntime.InvokeVoidAsync("crearPuntoEnCanvas", Prueba.Next(200), Prueba.Next(200));
    }

    private async Task CrearPuntoConID()
    {
        Random Prueba = new Random();
        await JSRuntime.InvokeVoidAsync("crearPuntoConIdentificadorEnCanvas", Prueba.Next(200), Prueba.Next(200), "punto1");
    }



    private async Task DibujarSegmento()
    {
        await JSRuntime.InvokeVoidAsync("dibujarSegmento", 50, 50, 200, 200, "blue", 2);
        // Parámetros: canvasId, puntoInicialX, puntoInicialY, puntoFinalX, puntoFinalY, color, grosor
    }
    private async Task DibujarArco()
   {
        System.Console.WriteLine("Me llamaron a dibujar");
        await JSRuntime.InvokeVoidAsync("drawArcBetweenPointsPaperJS", "myCanvas", 100, 50, 200, 250, 300, 150, "blue", 3);
        // Parámetros: canvasId, puntoCentroX, puntoCentroY, puntoArco1X, puntoArco1Y, puntoArco2X, puntoArco2Y, color, grosor
    }
    private async Task DibujarLinea()
    {
        await JSRuntime.InvokeVoidAsync("dibujarLineaConDosPuntos", "myCanvas", 50, 0, 20, 0, "blue", 3);
    }
    private async Task DibujarCircunferencia()
    {
        await JSRuntime.InvokeVoidAsync("dibujarCircunferencia", "myCanvas", 100, -30, 40);
        // Parámetros: canvasId, centroX, centroY, radio
    }

}