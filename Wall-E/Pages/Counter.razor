@inject IJSRuntime JSRuntime
@using BackEnd
@using Microsoft.AspNetCore.Components.Web;
@page "/counter"

<div class="counter">
    <canvas id="myCanvas" class="bg-gray"></canvas>

    <div class="compilator">
        <h4 class="title-compilator">Escriba su codigo | Error</h4>
        <div class="editor bg-gray">
            <textarea id="areaNumeracion" cols="1" rows="25" readonly class="enumerador"></textarea>
            <textarea @bind="Codigo" type="text" class="textarea-compilator" id="txCodigo"
            @onkeyup="@(async (e) => await Numeracion(e))" rows="25" cols="70"
                style="white-space: nowrap; overflow-y: scroll;"
            @onscroll='@(async () => await ScrollSync())'></textarea>
        </div>
        <textarea @bind="Consola" @onclick="ClearDefaultText" class="error-compilator bg-gray" readonly></textarea>
        <div>
            <button class="btn-compilator-compilar btn-compilator bg-gray"
                @onclick="ParsearExpression"><strong>Compilar</strong></button>
            <button class="btn-compilator-compilar btn-compilator bg-gray"><strong>Restaurar</strong></button>
            <button class="btn-compilator-compilar btn-compilator bg-gray"><strong>Importar</strong></button>
        </div>
    </div>
</div>


@code
{
    @*Nuevos Metodos Agregados*@

    private string _codigo = "Escribe tu código aquí";
    public string Codigo
    {
        get { return _codigo; }
        set { _codigo = value; }
    }
    private string _consola = "";

    public string Consola
    {
        get { return _consola; }
        set { _consola = value; }
    }
    private void ClearDefaultText()
    {

        if (_codigo == "Escribe tu código aquí")
        {
            Codigo = ""; // Esto eliminará la frase por defecto
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("resizeCanvas", "myCanvas");
        }
    }
     private  void ParsearExpression()
    {
        Consola = "";
        
        @* BackEnd.Bib1Interop.InyectandoRuntime(JSRuntime);
        BackEnd.Drawing.DibujarEnCanvas(); *@
        JSRuntime.InvokeVoidAsync("clearCanvas","myCanvas");
        if(Codigo!=""){
        ForDraw.SetRuntime(JSRuntime,_codigo);
        Consola  = ForDraw.Console;
        }
    }
    private async Task Numeracion(KeyboardEventArgs args)
    {
        // Método de numeración aquí
        await JSRuntime.InvokeVoidAsync("Numeracion");

    }

    private async Task ScrollSync()
    {
        await JSRuntime.InvokeVoidAsync("scrollSync", "areaNumeracion", "txCodigo");
    }

     private async Task Dibujar()
    {   
        // Método de numeración aquí
        await JSRuntime.InvokeVoidAsync("DibujarPuntoEnCanvas", 20, 20);

    }

}